@page "/tours"
@using BlazorApp1.Models;
@using BlazorApp1.Services;
@using DAL;
@inject TourService tourService;



<h1>Tours</h1>


@*<p>
        <MatDatePicker @bind-Value="@Date1" Label="Date"></MatDatePicker>
    </p>*@

<p>
    <MatSelectItem @bind-Value="@value1" Items="@vlaue1Items" Label="Tour"></MatSelectItem>
</p>

<p>
    <MatSelectItem @bind-Value="@typetransport" Items="@typetransportItems" Label="Transport"></MatSelectItem>
</p>

<p>
    <MatTextField @bind-Value="@myDoubleValue" Label="Int Field"></MatTextField>
</p>
<MatButton Raised="true" OnClick="Filter">Baton</MatButton>

<style>
    .bodytop {
        display: flex;
        /*border:1px black solid;*/
        /*background: url(../img/fon.png);*/
        margin-left: 138px;
    }

    .conteinert {
        width: 250px;
        height: 300px;
        /*border:1px black solid;*/
        margin-left: 120px;
        box-shadow: 0 0 10px rgba(0,0,0,0.2);
    }

    .imgt {
        width: 100%;
        height: 50%;
    }

    .namet {
        font-size: 24px;
        font-weight: bold;
        text-align: center;
        margin-top: 0;
        margin-bottom: 0;
        font-family: Times New Roman;
    }

    .typet {
        /*margin-top: 3px;*/
        margin-bottom: 0;
        font-size: 20px;
        margin-left: 10px;
        font-family: Times New Roman;
        /*line-height:0;*/
    }

    .transportt {
        margin-top: -5px;
        margin-bottom: 0;
        font-size: 20px;
        margin-left: 10px;
        font-family: Times New Roman;

    }

    .routet {
        margin-top: -3px;
        margin-bottom: 0;
        font-size: 15px;
        text-align: center;
        font-family: Times New Roman;
    }

    .pricet {
        text-align: right;
        font-size: 30px;
        margin-top: -5px;
        margin-bottom: 0;
        margin-right: 10px;
        font-family: Times New Roman;
        color: #D0000A;
    }

    .bodytop .conteinert {
        justify-content: space-between;
        float: left;
        margin-top: 28px;
        margin-bottom: 0px;
    }

    .bodytop .conteinert {
        transition: .3s;
    }

        .bodytop .conteinert:hover {
            box-shadow: 0 15px 20px rgba(255,166,12,.4);
            transform: translateY(-7px);
        }

    .tourt {
        color: #212529;
    }

        .tourt:hover {
            text-decoration: none;
            color: #212529;
        }
</style>

@if (tours == null)
{
    <p><em>Loading...</em></p>
}
else
{

<div class="bodytop">
    @foreach (var tours in tours)
    {
    <a class="tourt" href="/tourone/@tours.id">
        <div class="conteinert">
            <img class="imgt" src="@tours.imagePath">
            <p class="namet">@tours.nameTour</p>
            <p class="typet"><b>Type:</b> @tours.typeOfTour</p>
            <p class="transportt"><b>Transport:</b> @tours.typeOfTransport</p>
            <p class="routet">(@tours.route)</p>
            <p class="pricet">@tours.price UAH</p>
        </div>
    </a>
    }
  </div>

        @if (pageNum > 1)
        {
            <button name="prev" @onclick="PrevPage">Prev</button>

        }
        <span>@pageNum</span>
        <button @onclick="NextPage">Next</button>

    }

    @code {


        //public DateTime Date1 { get; set; }

        string? value1;
        string[] vlaue1Items = new[]
        {
    "Extreme",
    "Gastro-tour",
    "Cruise",
    "Ski",
    "Ukraine",
    "All",
    };

        string? typetransport;
        string[] typetransportItems = new[]
        {
    "Bus",
    "Train",
    "Airplane",
    "Ship",
    "All",
    };


        double myDoubleValue;

        bool click = false;

private List<TourViewModel>
    tours;
    private int pageNum = 1;
    private int pageSize = 3;
    protected override async Task OnInitializedAsync()
    {
        tours = await tourService.GetAll(new PagingParameters { PageNumber = pageNum, PageSize = pageSize });
    }
    public async Task NextPage()
    {
        pageNum++;
        if (click == true)
        {
            await this.Filter();
        }
        else
        {
            tours = await tourService.GetAll(new PagingParameters { PageNumber = pageNum, PageSize = pageSize });
        }
    }
    public async Task PrevPage()
    {
        if (pageNum > 1)
        {
            pageNum--;
            if (click == true)
            {
                await this.Filter();
            }
            else
            {
                tours = await tourService.GetAll(new PagingParameters { PageNumber = pageNum, PageSize = pageSize });
            }
        }


    }

    public async Task Filter()
    {
        click = true;
        PagingParameters paging = new PagingParameters
        {
            PageNumber = pageNum,
            PageSize = pageSize,
            //Date = Date1,
            TypeOfTour = value1 ?? "All",
            TypeOfTransport = typetransport ?? "All",
            Price = myDoubleValue == 0 ? 1000000 : myDoubleValue
        };
        tours = await tourService.GetFilter(paging);
    }
    }
